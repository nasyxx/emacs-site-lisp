#+PROPERTY: header-args:emacs-lisp :tangle (expand-file-name "nasy-襍.el") :lexical t
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+options: author:t broken-links:mark c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2021-06-15 Tue>
#+author: Nasy
#+email: nasyxx@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.0.50 (Org mode 9.4.6)


* 題                                                           :noexport:

#+begin_src emacs-lisp
  ;;; nasy-襍.el --- Nasy's 襍餘.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2021  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; 所收集襍餘也

  ;;; Code:
#+end_src

* Single Function to Center Emacs Window on Screen

#+begin_src emacs-lisp
  ;;;###autoload
  (defun nasy/frame-recenter (&optional frame)
    "Center FRAME on the screen.
  FRAME can be a frame name, a terminal name, or a frame.
  If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (let* ((frame (or (and (boundp 'frame) frame) (selected-frame)))
             (frame-w (frame-pixel-width frame))
             (frame-h (frame-pixel-height frame))
              ;; frame-monitor-workarea returns (x y width height) for the monitor
             (monitor-w (nth 2 (frame-monitor-workarea frame)))
             (monitor-h (nth 3 (frame-monitor-workarea frame)))
             (center (list (/ (- monitor-w frame-w) 2)
                           (/ (- monitor-h frame-h) 2))))
        (apply 'set-frame-position (flatten-list (list frame center))))))
#+end_src

* 結                                                           :noexport:

#+begin_src emacs-lisp
  ;;(provide 'nasy-襍)
  ;;; nasy-襍.el ends here
#+end_src
